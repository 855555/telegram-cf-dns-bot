name: Bark iOS Notification
on:
  # 当有新的PR被合并到主分支时触发
  pull_request:
    types: [closed]
    branches: [main]
 
  # 当主分支有新的提交时触发
  push:
    branches: [main]
 
  # 当创建新的Release时触发
  release:
    types: [published]
 
  # 允许手动触发
  workflow_dispatch:
    inputs:
      title:
        description: '通知标题'
        required: true
        default: '手动触发的通知'
      message:
        description: '通知内容'
        required: true
        default: '这是一条手动触发的Bark通知'
jobs:
  send-notification:
    name: Send notification to iOS
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
       
      - name: Set notification content for PR
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          echo "TITLE=PR已合并" >> $GITHUB_ENV
          echo "MESSAGE=PR #${{ github.event.pull_request.number }} [${{ github.event.pull_request.title }}] 已合并到主分支" >> $GITHUB_ENV
         
      - name: Set notification content for Push
        if: github.event_name == 'push'
        run: |
          echo "TITLE=新提交" >> $GITHUB_ENV
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          echo "MESSAGE=主分支有新的提交: $COMMIT_MSG" >> $GITHUB_ENV
         
      - name: Set notification content for Release
        if: github.event_name == 'release'
        run: |
          echo "TITLE=新版本发布" >> $GITHUB_ENV
          echo "MESSAGE=版本 ${{ github.event.release.tag_name }} 已发布" >> $GITHUB_ENV
         
      - name: Set notification content for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "TITLE=${{ github.event.inputs.title }}" >> $GITHUB_ENV
          echo "MESSAGE=${{ github.event.inputs.message }}" >> $GITHUB_ENV
      
      - name: URL encode variables and debug
        run: |
          echo "原始 TITLE: ${{ env.TITLE }}"
          echo "原始 MESSAGE: ${{ env.MESSAGE }}"
          echo "原始 BARK_URL 前缀: ${{ secrets.BARK_URL }}"
          
          ENCODED_TITLE=$(printf '%s' "${{ env.TITLE }}" | jq -s -R -r @uri)
          ENCODED_MESSAGE=$(printf '%s' "${{ env.MESSAGE }}" | jq -s -R -r @uri)
          
          echo "编码后 TITLE: $ENCODED_TITLE"
          echo "编码后 MESSAGE: $ENCODED_MESSAGE"
          
          FINAL_URL="${{ secrets.BARK_URL }}/${ENCODED_TITLE}/${ENCODED_MESSAGE}?icon=https://github.githubassets.com/favicons/favicon.png&group=TelegramCFDNSBot"
          echo "构建的完整URL(敏感信息已隐藏): ${FINAL_URL//${{ secrets.BARK_URL }}/BARK_URL_SECRET}"
          
          echo "ENCODED_TITLE=$ENCODED_TITLE" >> $GITHUB_ENV
          echo "ENCODED_MESSAGE=$ENCODED_MESSAGE" >> $GITHUB_ENV
          echo "FINAL_URL=$FINAL_URL" >> $GITHUB_ENV
     
      - name: Try curl request for debugging
        run: |
          echo "尝试使用curl发送请求..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.FINAL_URL }}")
          echo "curl 请求状态码: $STATUS"
          
          if [ $STATUS -ge 200 ] && [ $STATUS -lt 300 ]; then
            echo "curl 请求成功"
          else
            echo "curl 请求失败，状态码: $STATUS"
            RESPONSE=$(curl -s "${{ env.FINAL_URL }}")
            echo "详细响应: $RESPONSE"
          fi
          
      - name: Send notification to Bark
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.FINAL_URL }}
          method: 'GET'