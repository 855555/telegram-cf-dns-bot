name: Auto Release

on:
  push:
    tags:
      - 'v*' # 当推送符合 v* 格式的标签时触发，例如 v1.0.0

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整的历史记录，用于生成更新日志

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Get commit messages
        id: get_commits
        run: |
          # 获取最新的标签
          LATEST_TAG=$(git describe --tags --abbrev=0)
          
          # 获取最新标签之前的标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$LATEST_TAG^" 2>/dev/null || echo "")
          echo "Previous tag: $PREVIOUS_TAG"
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Current tag: ${{ steps.get_version.outputs.VERSION }}"
            COMMIT_MSGS=$(git log "${PREVIOUS_TAG}..${{ steps.get_version.outputs.VERSION }}" --pretty=format:"%s" | sed 's/^/- /')
          else
            # 如果没有上一个 tag，获取所有提交消息
            COMMIT_MSGS=$(git log --pretty=format:"%s" | sed 's/^/- /')
          fi

          echo "Commit messages: $COMMIT_MSGS"
          # 使用 GitHub Actions 的多行字符串语法写入输出
          {
            echo "COMMITS<<EOF"
            echo "$COMMIT_MSGS"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            # Telegram Cloudflare DNS Bot ${{ steps.get_version.outputs.VERSION }}
            
            ## 更新日志
            
            ${{ steps.get_commits.outputs.COMMITS }}
            
            ## 快速部署
            
            ```bash
            # 使用 Docker 部署
            docker pull ghcr.io/zcp1997/telegram-cf-dns-bot:latest
            
            # 使用 docker-compose 部署
            version: '3'
            services:
              tg-cf-dns-bot:
                image: ghcr.io/zcp1997/telegram-cf-dns-bot:latest
                restart: unless-stopped
                environment:
                  - TELEGRAM_TOKEN=your_token_here
                  - CF_API_TOKEN=your_token_here
                  - ALLOWED_CHAT_IDS=your_chat_id_here
             
                volumes:
                  - ./config:/app/config
                  - ./logs:/app/logs      
            ```
          draft: false
          prerelease: false
          generate_release_notes: true